{"version":3,"sources":["Components/Snake.js","Components/Food.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","Footer","href","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","isActive","App","handleStart","setState","handlePause","handleRestart","state","onKeyDown","e","window","event","keyCode","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","Button","variant","size","onClick","icon","faPlay","faPause","faRedo","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d00f3ac8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`\r\n        }\r\n        return (\r\n          <div className=\"main-dot\" key={i} style={style}></div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n    return (\r\n        <div className=\"main-food\" style={style}></div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n    \r\n    <a href=\"https://github.com/rishabkhanna27\"><b><u>Made By: Rishab Khanna</u></b></a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Snake from './Components/Snake';\nimport Food from './Components/Food';\nimport Footer from './Components/Footer';\nimport {Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faRedo  } from '@fortawesome/free-solid-svg-icons';\n\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  isActive: false,\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\nclass App extends Component {\n\n  handleStart = () => {\n    this.setState({isActive: true});\n  };\n  handlePause = () => {\n    this.setState({isActive: false});\n  };\n  handleRestart = () => {\n    this.setState(initialState);\n  }\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n \n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n        default:\n          break;\n    }\n  }\n  \n  moveSnake = () => {\n    if(this.state.isActive)\n    {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n      default:\n        break;\n\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n  }\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n  \n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n  \n  render() {\n    return (\n      <div>\n      \n        <div className=\"area\">\n          \n        <Snake snakeDots={this.state.snakeDots}/>\n        <Food dot={this.state.food}/>\n      </div>\n      <p className=\"head\">\n            <b><u>Snake Game</u></b>\n          </p>\n      <div className=\"main\">\n      \n      <Button className=\"button\" variant=\"info\" size=\"lg\"  onClick={this.handleStart}><FontAwesomeIcon icon={faPlay} /></Button>{'     '}\n      <Button className=\"button\" variant=\"primary\" size=\"lg\"  onClick={this.handlePause}><FontAwesomeIcon icon={faPause} /></Button> {'    '}\n      <Button className=\"button\" variant=\"danger\" size=\"lg\"  onClick={this.handleRestart}><FontAwesomeIcon icon={faRedo} /></Button>\n     \n      </div>\n\n      <Footer/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}